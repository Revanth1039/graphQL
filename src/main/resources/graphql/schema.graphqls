
schema {
 query: Query
 mutation:Mutation
}

type Query {
 getCaseById(id: String): Case
 getAllCases:[Case]
}

type Mutation{
 addCase(id:String,
     description:String,
    endImage:String,
    name:String,
    state:CaseState,    
    numberOfMileStones:Int,
    numberOfFinishedMilestones:Int,
    numberOfPartners:Int,
    numberOfTasks:Int,
    numberOfServiceProviders:Int,
    numberOfPendingTasks:Int,
     milestones:[MilestoneInput],
    partners:[ProfileInput],serviceProviders:[ServiceProviderInput] ):Case,
}



type Case{
    id:ID!,
    description:String,
    endImage:String,
    name:String,
    numberOfMileStones:Int,
    numberOfFinishedMilestones:Int,
    numberOfPartners:Int,
    numberOfTasks:Int,
    state:CaseState,
    numberOfServiceProviders:Int,
    numberOfPendingTasks:Int,
     milestones:[Milestone],
    partners:[Profile],
    serviceProviders:[ServiceProvider]  
}

enum CaseState {
  PENDING
  FINISHED
}

input  CaseInput{
    id:ID!,
    description:String,
    endImage:String,
    name:String,
    numberOfMileStones:Int,
    numberOfFinishedMilestones:Int,
    numberOfPartners:Int,
    numberOfTasks:Int,
    state:CaseState,
    numberOfServiceProviders:Int,
    numberOfPendingTasks:Int,
     milestones:[MilestoneInput],
    partners:[ProfileInput],
    serviceProviders:[ServiceProviderInput]  
}

type Milestone{
    id:ID!,
    description:String,
    name:String,
    icon:String,
    state:MilestoneState,
    numberOfTasks:Int,
    numberOfPendingTasks:Int,
    progress:Int,
    Tasks:[Task]  
}

enum MilestoneState {
  FINISHED
  PENDING
  NOT_AVAILABLE
}

input MilestoneInput{
    id:String,
    description:String,
    name:String,
    icon:String,
    state:MilestoneState,
    numberOfTasks:Int,
    numberOfPendingTasks:Int,
    progress:Int,
    Tasks:[TaskInput]  
     
}

type ServiceProvider{
    id:ID!,
    avatar:String,
    company:String,
    name:String,
    types: [ServiceProviderType],
    info: ServiceProviderInfo,
    cases:[Case],
    tasks:[Task] 
}


input ServiceProviderInput{
    id:String,
    avatar:String,
    company:String,
    name:String,
    types: [ServiceProviderType],  
    info: ServiceProviderInfoInput,  
    cases:[CaseInput],
    tasks:[TaskInput]
}

enum ServiceProviderType {
  NOTARY
  BROKER
  CONSULTANT
  ADVISOR
}

type ServiceProviderInfo {
  address: String
  ZipCode: String
  Place: String
  email: String
  phoneNumber: String
}

input ServiceProviderInfoInput {
  address: String
  ZipCode: String
  Place: String
  email: String
  phoneNumber: String
}

type Profile{
    id:ID!,
    email:String,
    avatar:String,
    firstName:String,
    lastName:String,
    numberOfNotifications:Int,
    numberOfPendingTasks:Int,
    numberOfOpenCases:Int,
    tasks:[Task],
    cases:[Case],
    partners:[Profile]   
}

input ProfileInput{
    id:ID!,
    email:String,
    avatar:String,
    firstName:String,
    lastName:String,
    numberOfNotifications:Int,
    numberOfPendingTasks:Int,
    numberOfOpenCases:Int,
    tasks:[TaskInput],
    cases:[CaseInput],     
    partners:[ProfileInput]   
}


type Task {
  id: ID!
  name: String
  description: String
  serviceProvider: ServiceProvider
  state: TaskState
  cases: Case
  message: String
  numberOfSteps: Int
  numberOfStepsCompleted: Int
  isApproved: Boolean
}

input TaskInput {
  id: ID!
  name: String
  description: String
  serviceProvider: ServiceProviderInput
  state: TaskState
  cases: CaseInput
  message: String
  numberOfSteps: Int
  numberOfStepsCompleted: Int
  isApproved: Boolean
}

enum TaskState {
  FINISHED
  PENDING
  NOT_AVAILABLE
}

type Document {
  title: String
  file: String
  type: DocumentType
}

enum DocumentType {
  PDF
  IMG
}

type Form {
  title: String
  description: String
  canEdit: Boolean
  state: FormState
}

enum FormState {
  EMPTY
  DRAFT
  COMPLETE
}